
import numpy as np
import seaborn as sn
import pandas as pd
import py
import matplotlib.pyplot as plt

def convert2dataframe(recall_rate_results,order):
    data = []

    for method_name in order:
        recall_rate_matrix = recall_rate_results[method_name]
        for run_idx , rr in enumerate(recall_rate_matrix):
            for  k in range(1,21):
                data.append([method_name,run_idx, k, rr[k-1]])

    return pd.DataFrame(data, columns=['method','run', 'k', 'Recall Rate@k'])

def convert2dataframe_diff(recall_rate_results):
    data = []

    for method_name, recall_rate_matrix in recall_rate_results.items():
        recall_rate_matrix = np.round(recall_rate_matrix,2)
        row = [method_name]
        row.extend(recall_rate_matrix)
        data.append(row)

    return pd.DataFrame(data, columns=['Method'] + list(range(1,21)))


# open_office 1 year
recall_rate_res = {
'$\mathrm{BM25F_{ext}}$':  np.asarray([
        [0.280660,0.362564,0.405017,0.431818,0.450043,0.464408,0.476630,0.487350,0.497213,0.507290,0.515866,0.521226,0.526587,0.531304,0.536235,0.541595,0.546741,0.554031,0.558748,0.562607,],
       ]),
'REP': np.asarray([
        [0.273156,0.357847,0.398799,0.429031,0.450901,0.466123,0.478345,0.490780,0.500214,0.508362,0.517367,0.522084,0.528945,0.535377,0.540094,0.545669,0.550172,0.555532,0.559605,0.563250,],
    ]),
'DWEN': np.asarray([
    [0.19639794168096056, 0.26500857632933106, 0.30510291595197253, 0.33469125214408235, 0.35548885077186965, 0.3747855917667238, 0.3893653516295026, 0.3998713550600343, 0.4125214408233276, 0.41916809605488853, 0.42860205831903947, 0.436106346483705, 0.44382504288164665, 0.4509005145797599, 0.4571183533447684, 0.463336192109777, 0.4689108061749571, 0.47427101200686106, 0.47898799313893653, 0.48434819897084047],
]),
'Siamese Pair':np.asarray([
        [0.2538593481989708, 0.33704974271012006, 0.383147512864494, 0.4159519725557461, 0.4425385934819897, 0.4611921097770154, 0.475557461406518, 0.4858490566037736, 0.4984991423670669, 0.5107204116638079, 0.5186535162950258, 0.5268010291595198, 0.5343053173241853, 0.5426672384219554, 0.5475986277873071, 0.5518867924528302, 0.5566037735849056, 0.5611063464837049, 0.5653945111492281, 0.5698970840480274],
    ]),
'Siamese Triplet': np.asarray([
   [0.2722984562607204, 0.3484133790737564, 0.3874356775300172, 0.4135934819897084, 0.43546312178387653, 0.44961406518010294, 0.46419382504288165, 0.47598627787307035, 0.4858490566037736, 0.495926243567753, 0.5032161234991424, 0.5083619210977701, 0.5160806174957119, 0.5229416809605489, 0.5291595197255574, 0.5328044596912521, 0.5366638078902229, 0.5400943396226415, 0.5452401372212693, 0.5490994854202401],
]),
'SABD': np.asarray([
 [0.30853344768439106, 0.38893653516295024, 0.43331903945111494, 0.4659090909090909, 0.49056603773584906, 0.5090051457975986, 0.5235849056603774, 0.5358061749571184, 0.5441680960548885, 0.5529588336192109, 0.5600343053173242, 0.5658233276157805, 0.5724699828473413, 0.5769725557461407, 0.5806174957118353, 0.5853344768439108, 0.589622641509434, 0.5930531732418525, 0.5958404802744426, 0.6003430531732419]
]),
'DBR(BERT)': np.asarray([[0.344, 0.434, 0.474, 0.498, 0.518, 0.533, 0.545, 0.559, 0.568, 0.573, 0.584, 0.591, 0.596, 0.601, 0.607, 0.61, 0.615, 0.621, 0.626, 0.63]]),
'DBR(RoBERTa)': np.asarray([[0.352, 0.442, 0.488, 0.521, 0.538, 0.551, 0.562, 0.57, 0.583, 0.592, 0.601, 0.606, 0.611, 0.615, 0.622, 0.626, 0.627, 0.63, 0.634, 0.637]]),

# 'DBR(GPT-2)': np.asarray([[0.334, 0.428, 0.477, 0.507, 0.525, 0.536, 0.549, 0.562, 0.572, 0.581, 0.588, 0.589, 0.593, 0.6, 0.603, 0.614, 0.62, 0.627, 0.628, 0.631]]),
}


# eclipse 1 year
# recall_rate_res = {
# '$\mathrm{BM25F_{ext}}$':  np.asarray([
# [0.306164,0.371918,0.414612,0.438128,0.456393,0.472146,0.481963,0.492466,0.503653,0.513014,0.519635,0.525342,0.534247,0.540411,0.545434,0.549543,0.554338,0.558904,0.562557,0.566667,],
#     ]),
# 'REP': np.asarray([
#     [0.368721,0.450457,0.493607,0.522146,0.538584,0.556849,0.571918,0.583562,0.592922,0.601598,0.607763,0.615297,0.623973,0.628539,0.635388,0.640411,0.644749,0.650228,0.654566,0.658447,],
#     ]),
# "DWEN":np.asarray([
#     [0.26187214611872145, 0.33858447488584476, 0.3835616438356164, 0.41643835616438357, 0.44269406392694066, 0.46141552511415523, 0.47876712328767124, 0.4942922374429224, 0.5054794520547945, 0.5164383561643836, 0.5255707762557078, 0.5349315068493151, 0.5426940639269406, 0.5495433789954338, 0.5557077625570777, 0.5623287671232877, 0.5668949771689498, 0.5732876712328767, 0.5778538812785388, 0.5815068493150685],
#
#     ]),
# "Siamese Pair": np.asarray([
# [0.32922374429223744, 0.40730593607305937, 0.45365296803652966, 0.4858447488584475, 0.5077625570776255, 0.5289954337899543, 0.5477168949771689, 0.5616438356164384, 0.5769406392694064, 0.5847031963470319, 0.593607305936073, 0.5988584474885845, 0.6045662100456621, 0.6091324200913242, 0.615296803652968, 0.6219178082191781, 0.6248858447488584, 0.6340182648401826, 0.6376712328767123, 0.6415525114155252],
#     ]),
# "Siamese Triplet": np.asarray([
# [0.30684931506849317, 0.38767123287671235, 0.42945205479452053, 0.4577625570776256, 0.4831050228310502, 0.5041095890410959, 0.5189497716894977, 0.530365296803653, 0.541095890410959, 0.5506849315068493, 0.5584474885844749, 0.5682648401826484, 0.5769406392694064, 0.582648401826484, 0.5894977168949772, 0.595662100456621, 0.6013698630136987, 0.6077625570776256, 0.6134703196347032, 0.6189497716894977],
#     ]),
# "SABD": np.asarray([
#  [0.3901826484018265, 0.47648401826484016, 0.5232876712328767, 0.5550228310502283, 0.5794520547945206, 0.5965753424657534, 0.6102739726027397, 0.6223744292237443, 0.6328767123287671, 0.6424657534246575, 0.6490867579908676, 0.6575342465753424, 0.6614155251141552, 0.6687214611872146, 0.6753424657534246, 0.6794520547945205, 0.6844748858447488, 0.6892694063926941, 0.6931506849315069, 0.6970319634703196]
# ]),
# 'DBR(BERT)': np.asarray([[0.397, 0.491, 0.539, 0.573, 0.592, 0.612, 0.629, 0.636, 0.641, 0.655, 0.661, 0.667, 0.672, 0.676, 0.685, 0.689, 0.695, 0.701, 0.706, 0.708]]),
# 'DBR(RoBERTa)': np.asarray([[0.382, 0.481, 0.537, 0.575, 0.594, 0.611, 0.621, 0.63, 0.645, 0.65, 0.655, 0.658, 0.664, 0.668, 0.674, 0.677, 0.682, 0.685, 0.686, 0.691]]),
# }


# net beans 1 year
# recall_rate_res = {
# '$\mathrm{BM25F_{ext}}$':  np.asarray([
#     [0.354961,0.424436,0.457377,0.476742,0.496107,0.508884,0.520264,0.529846,0.538830,0.547015,0.552006,0.556997,0.561389,0.564983,0.570174,0.574366,0.578958,0.583150,0.586345,0.590337,],
#
# ]),
# 'REP': np.asarray([
#     [0.386904,0.470154,0.508684,0.536634,0.554003,0.568577,0.583550,0.593731,0.603713,0.611300,0.620283,0.628269,0.634258,0.640447,0.644240,0.649631,0.654422,0.659014,0.661010,0.665402,],
#     ]),
# 'DWEN': np.asarray([
#     [0.2828907965661809, 0.3619484927131164, 0.4076662008384907, 0.4388101417448593, 0.46656019165502094, 0.48672389698542623, 0.5044919145538032, 0.521062088241166, 0.5338390896386505, 0.5444200439209423, 0.5559992014374127, 0.5651826711918546, 0.5741665002994609, 0.5805550009982032, 0.5887402675184668, 0.5953284088640447, 0.6039129566779796, 0.6114993012577361, 0.6158913954881213, 0.6216809742463566],
#     ]),
# 'Siamese Pair':np.asarray([
#     [0.40027949690556996, 0.4797364743461769, 0.5296466360551009, 0.5627869834298264, 0.581952485526053, 0.5999201437412657, 0.6144939109602715, 0.6302655220602915, 0.643042523457776, 0.6518267119185466, 0.6610101816729886, 0.6703932920742663, 0.6779796366540227, 0.6851666999401078, 0.6897584348173288, 0.6941505290477141, 0.6977440606907567, 0.7023357955679776, 0.7061289678578558, 0.7105210620882412],
#     ]),
# 'Siamese Triplet': np.asarray([
#     [0.3835096825713715, 0.4655619884208425, 0.5086843681373527, 0.5356358554601717, 0.5579956079057696, 0.5753643441804751, 0.5889399081653025, 0.6015172689159513, 0.6124975044919145, 0.6212816929526852, 0.6296666001197844, 0.6366540227590337, 0.6448392892792972, 0.6506288680375324, 0.6540227590337393, 0.6586144939109603, 0.6650029946097026, 0.668596526252745, 0.6745857456578159, 0.6787781992413655],
#
# ]),
# 'DBR-CNN': np.asarray([
#  [0.23777201038131363, 0.30624875224595727, 0.3471750848472749, 0.3737272908764224, 0.3978838091435416, 0.4132561389498902, 0.4276302655220603, 0.4374126572170094, 0.4475943302056299, 0.4567777999600719, 0.46596126971451385, 0.47394689558794173, 0.4789379117588341, 0.48532641245757635, 0.49071670992214017, 0.49510880415252545, 0.4997005390297465, 0.5052904771411459, 0.5092832900778599, 0.5120782591335596]]),
# 'SABD': np.asarray([
#     [0.4493910960271511, 0.5450189658614494, 0.5947294869235377, 0.6238770213615492, 0.645038929926133, 0.663405869435017, 0.6773807147135157, 0.6905569974046716, 0.7017368736274705, 0.7117189059692554, 0.7175084847274905, 0.7234977041325614, 0.7298862048313036, 0.7370732681173887, 0.7444599720503094, 0.7494509882212018, 0.7538430824515872, 0.7578358953883011, 0.7610301457376721, 0.7658215212617289],
# ]),
#
# 'DBR(BERT)': np.asarray([
# [0.452, 0.546, 0.581, 0.614, 0.639, 0.657, 0.673, 0.692, 0.701, 0.708, 0.715, 0.722, 0.733, 0.739, 0.744, 0.745, 0.748, 0.75, 0.751, 0.754]]),
# 'DBR(RoBERTa)': np.asarray([
# [0.4426877470355731, 0.5460191981931113, 0.6070016939582157, 0.6380575945793338, 0.6572557876905702, 0.6741953698475438, 0.6843591191417279, 0.6967814793901751, 0.7075098814229249, 0.717673630717109, 0.7261434217955957, 0.7346132128740824, 0.7413890457368718, 0.7481648785996612, 0.7532467532467533, 0.7571993224167137, 0.7634105025409373, 0.7684923771880293, 0.7730095990965556, 0.7780914737436476]
# ]),
# }


# mozilla 1 year
# recall_rate_res = {
# '$\mathrm{BM25F_{ext}}$':  np.asarray([
#     [0.260592,0.341511,0.386249,0.418204,0.439645,0.459540,0.473869,0.487682,0.499330,0.510463,0.518709,0.528915,0.534378,0.540357,0.547160,0.552108,0.558808,0.562725,0.567261,0.572724,],
# ]),
# 'REP': np.asarray([
#     [0.280074,0.366972,0.413978,0.446964,0.470776,0.490362,0.507680,0.518812,0.530255,0.539223,0.548809,0.557365,0.566540,0.573446,0.581177,0.586331,0.589939,0.593959,0.598907,0.602928,],
#     ]),
# 'DWEN':np.asarray([
#     [0.22131738995979797, 0.3031646222038965, 0.34852077105453044, 0.38099165034532523, 0.4089269147510566, 0.430368003298629, 0.44593340892691474, 0.46098340377280694, 0.4753118235233481, 0.486135449953613, 0.49520667972373983, 0.5036594165549944, 0.5115967426038552, 0.51922482218328, 0.5255128337284816, 0.532213173899598, 0.5388104319142356, 0.5445830326770436, 0.5494278940315431, 0.5543758375425214],
# ]),
# 'Siamese Pair':np.asarray([
#     [0.3064632512112153, 0.4023296567364189, 0.4531491598804247, 0.48479538191938976, 0.5085042779094938, 0.527162148232141, 0.543346046799299, 0.5568498092980105, 0.5669518606329245, 0.5767446654984022, 0.5860220595814865, 0.5938563034738686, 0.6008658901144212, 0.607772394598495, 0.6152973920214411, 0.6211730749407277, 0.6280795794248015, 0.6338521801876095, 0.638387795072673, 0.6429234099577363],
#     ]),
# 'Siamese Triplet':np.asarray([
#     [0.2908978455829296, 0.37387898154829396, 0.42542005978765074, 0.4554169673229564, 0.4790227811565818, 0.49994845892176065, 0.5133491392639934, 0.5247912586331306, 0.5354087207504381, 0.5454076899288733, 0.5530357695082981, 0.5594268632099784, 0.5656117925987012, 0.5736522008040408, 0.580043294505721, 0.5862282238944438, 0.5910730852489434, 0.5946809607256984, 0.5991134934542831, 0.6031336975569529],
#     ]),
# 'SABD': np.asarray([
#     [0.34151118441397793, 0.4411916297288939, 0.4942789403154314, 0.527883723327492, 0.5516957014740749, 0.5723121327698175, 0.5873621276157097, 0.601278218740336, 0.612101845170601, 0.6230285537573446, 0.633336769405216, 0.6405525203587259, 0.6479744356251933, 0.6535408720750439, 0.6598288836202454, 0.6645706628182662, 0.6683847026079786, 0.6735388104319142, 0.6780744253169776, 0.6812699721678177],
# ]),
# 'DBR(BERT)': np.asarray([
# [0.343, 0.462, 0.516, 0.552, 0.577, 0.596, 0.608, 0.623, 0.635, 0.645, 0.657, 0.668, 0.671, 0.675, 0.683, 0.691, 0.693, 0.695, 0.701, 0.704]
# ]),
# 'DBR(RoBERTa)': np.asarray([
# [0.321, 0.427, 0.496, 0.544, 0.576, 0.601, 0.609, 0.616, 0.633, 0.649, 0.659, 0.665, 0.677, 0.685, 0.688, 0.696, 0.704, 0.706, 0.717, 0.72]]),
# }


sn.set_style("ticks")
flatui = ["#00FFFF", "#FF00FF" ,"#4C72B0", "#DD8452", "#55A868", "#937860", "#8C8C8C", "#C44E52"]
sn.set_palette(sn.color_palette(flatui))

plt.figure(figsize=(9, 6))

order = ["DWEN", '$\mathrm{BM25F_{ext}}$', "Siamese Triplet", "Siamese Pair", "REP", "SABD", "DBR(BERT)", "DBR(RoBERTa)"]

order.reverse()

k = list(range(1,21))
ax = sn.lineplot(x="k",y='Recall Rate@k',errorbar='sd',hue='method', style='method', markers=True, dashes=False, data=convert2dataframe(recall_rate_res,order))

import matplotlib.ticker as ticker
ax.xaxis.set_major_locator(ticker.MultipleLocator(1))
ax.xaxis.set_major_formatter(ticker.ScalarFormatter())
ax.yaxis.set_major_locator(ticker.MultipleLocator(0.05))
ax.yaxis.set_major_formatter(ticker.ScalarFormatter())

handles, labels = ax.get_legend_handles_labels()
ax.legend(handles=handles[0:], labels=labels[0:], loc='lower right')

ax.set(ylim=(0.15, 0.70))

fig = ax.get_figure()

fig.savefig("../data/open_office_365.pdf", format='pdf', bbox_inches='tight', pad_inches=0)

fig.show()




